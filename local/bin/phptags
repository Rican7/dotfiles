#! /usr/bin/env bash
#
# Script to simplify the calling of "ctags" for PHP projects, and fix the output of failed calls
#
#

# Detect what commands exist
hash ctags      2>/dev/null && ctags=true   || ctags=false
hash sed        2>/dev/null && sed=true     || sed=false

# Defaults
default_ctags_args="-R --PHP-kinds=+cidfv -f -"
default_filter="s'@.*\\\/\\\/ End .*@@'" # Have to use @ as the delimiter, or else bash freaks on "eval"
default_blankline_filter="'/^$/d'"
default_tag_file_name="tags"
behaviors_arg_prefix="--phptags-"
merge_args=false

# Some calculations
arg_prefix_length=${#behaviors_arg_prefix}

# Do we have ctags?
if $ctags ; then
	# Create a variable to hold our args
	filtered_args=""

	# Loop over all of our passed arguments
	for var in "$@";
	do
		# Were any of our args meant to modify this script?
		# (and not the subsequently called commands)
		if [[ $var == $behaviors_arg_prefix* ]] ; then
			# Grab the name of the arg, sans the prefix
			unprefixed_arg=${var:arg_prefix_length}

			# Act on behalf of our args
			case $unprefixed_arg in
				merge) merge_args=true
			esac
		else
			# Add our arg to our filtered list
			filtered_args="$filtered_args$var "
		fi
	done

    # Were any args manually passed?
    if [ $# -gt 0 ] ; then
		# Should we merge our args?
		if $merge_args ; then
			command="ctags $default_ctags_args $filtered_args"
		else
			command="ctags $filtered_args"
		fi
    else
        command="ctags $default_ctags_args"
    fi
else
    # Echo error and exit with a non-successful (non-zero) response
    echo "Ctags not available...";
    exit 1;
fi

# Do we have sed?
if $sed ; then
    # Filter
    command="$command | sed $default_filter"

    # Filter blank lines
    command="$command | sed $default_blankline_filter"
fi

# Append our tags file name
command="$command > $default_tag_file_name"



# Finally, run our command. :)
eval $command
