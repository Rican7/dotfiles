#! /usr/bin/env bash
#
# Script to simplify the calling of "phpctags" for most modern PHP projects
#
#

# Detect what commands exist
hash phpctags      2>/dev/null && phpctags=true   || phpctags=false

# Defaults
DEFAULT_SOURCE_DIRECTORY="./src"
DEFAULT_VENDOR_DIRECTORY="./vendor"
DEFAULT_VENDOR_TAGS_FILENAME="tags.vendor"
DEFAULT_EXCLUDE_PATTERN="tests"
DEFAULT_MEMORY_LIMIT="512M"

# Functions
echoerr() {
	echo -e "\033[00;31m${@}" 1>&2;
}

# Runtime variables
return_code=0


# Do we have ctags?
if ! $phpctags; then
    # Echo error and exit with a non-successful (non-zero) response
    echoerr "phpctags not available";
    exit 4;
fi

# Source directory
if [ ! -r "$DEFAULT_SOURCE_DIRECTORY" ] || [ ! -d "$DEFAULT_SOURCE_DIRECTORY" ] ; then
    echoerr "Directory \"$DEFAULT_SOURCE_DIRECTORY\" isn't readable. Skipping..."
    return_code=$(( $return_code | 8 ));
else
    echo "Generating tags for the \"$DEFAULT_SOURCE_DIRECTORY\" directory"

    `phpctags --memory=${DEFAULT_MEMORY_LIMIT} -R ${DEFAULT_SOURCE_DIRECTORY}`
    return_code=$?
fi

# Vendor directory
if [ ! -r "$DEFAULT_VENDOR_DIRECTORY" ] || [ ! -d "$DEFAULT_VENDOR_DIRECTORY" ] ; then
    echoerr "Directory \"$DEFAULT_VENDOR_DIRECTORY\" isn't readable. Skipping..."
    return_code=$(( $return_code | 8 ));
else
    echo "Generating tags for the \"$DEFAULT_VENDOR_DIRECTORY\" directory"

    `phpctags --memory=${DEFAULT_MEMORY_LIMIT} --exclude=\"${DEFAULT_EXCLUDE_PATTERN}\" -f ${DEFAULT_VENDOR_TAGS_FILENAME} -R ${DEFAULT_VENDOR_DIRECTORY}`
    return_code=$?
fi

if (( ($return_code & 8) == 8 )) ; then
    echoerr "Failed to generate tags for either \"$DEFAULT_SOURCE_DIRECTORY\" or \"$DEFAULT_VENDOR_DIRECTORY\""
fi

exit $return_code
