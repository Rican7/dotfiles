#! /usr/bin/env bash
#
# Script to wrap the most common "tmux" functionality. Like a super-alias.
#
#

# Define constants
readonly STARTUP_SCRIPT_DIR="$(printf "%s.d" "${BASH_SOURCE[0]}")"

# Create a function to echo out errors
function error() {
	# Let's get our arguments
	local message=$1

	# Echo out our message
	echo -e "\033[00;31mERROR:\033[00m $message" 1>&2
}

# Perform a TMUX command in wrapper that allows the command to work even if a
# TMUX server isn't currently running.
#
# (We have to use `tmux start-server` to run certain commands if a session
# doesn't exist yet... See: https://github.com/tmux/tmux/issues/182)
function tmux_command() {
	tmux start-server \; "$@"
}

# Create a function to check if a tmux session exists
function session_exists() {
	# Get the session id argument
	local sessionArg=$1

	# Did we pass an argument?
	if [ -n "$sessionArg" ]; then
		tmux_command has-session -t "$sessionArg" 2>/dev/null
	else
		tmux_command has-session 2>/dev/null
	fi
}

function get_start_script_path() {
	printf "%s/%s" "$STARTUP_SCRIPT_DIR" "$1"
}


# Let's define what commands exist
hash tmux		2>/dev/null && tmux=true || tmux=false

# Do we NOT have tmux?
if ! $tmux ; then
	# Echo error and exit with a non-successful (non-zero) response
	error "\"tmux\" not installed or unable to be executed";
	exit 1;
fi

# Define our start script
start_script_path=""
start_script=""

# Let's set some values based on the parameters
while getopts ":r:" opt; do
	case $opt in
		r)	start_script_path="$(get_start_script_path "$OPTARG")";;
		\?)	error "Unknown option: -$OPTARG"; exit 1;;
		:)	error "Invalid option: -$OPTARG requires an argument"; exit 1;;
	esac
done
shift $((OPTIND -1))

if [ -n "$start_script_path" ] && [ ! -x "$start_script_path" ]; then
	# Echo error and exit with a non-successful (non-zero) response
	error "Start script \"$start_script_path\" does not exist or is unable to be executed";
	exit 1;
fi

if [ -n "$start_script_path" ]; then
	# Determine the default TMUX command
	default_tmux_command="$(tmux_command show-options -gv default-command)"
	default_tmux_command="${default_tmux_command:-$(tmux_command show-options -gv default-shell)}"

	start_script="tmux source-file $start_script_path ; $default_tmux_command"
fi

# Grab our passed argument
readonly session_id=$1


# Did we pass an argument?
if [ -n "$session_id" ]; then
	# See if we have an existing session matching our passed name
	if session_exists "$session_id"; then
		exec tmux attach-session -t "$session_id"

	# We don't have an existing session with our passed name
	else
		if [ -n "$start_script" ]; then
			exec tmux new-session -s "$session_id" "$start_script"
		else
			exec tmux new-session -s "$session_id"
		fi
	fi

# No argument passed
else
	# See if we have any existing sessions
	if session_exists; then
		# Attach to the most recent session and interactively list our sessions
		exec tmux attach-session\; choose-tree -s -Z

	# No existing sessions
	else
		# Just create a new, default session
		if [ -n "$start_script" ]; then
			exec tmux new-session "$start_script"
		else
			exec tmux new-session
		fi
	fi
fi
